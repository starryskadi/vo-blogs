{"version":3,"sources":["components/Blogs/Blog/Blog.module.scss","components/Blogs/Blogs.module.scss","components/Banner/Banner.module.scss","components/Blogs/Blog/Blog.js","components/Blogs/Blogs.js","components/Banner/Banner.js","container/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blog","Blogs","Banner","blog","props","react_default","a","createElement","href","link","className","classes","src","image","alt","imageAlt","categories","title","state","posts","page","_this2","this","axios","get","then","res","setState","data","console","log","blogs","map","post","key","id","rendered","jetpack_featured_media_url","Fragment","React","Component","children","defaults","baseURL","Layout","components_Banner_Banner","Blogs_Blogs","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,wCCAlBF,EAAAC,QAAA,CAAkBE,MAAA,0CCAlBH,EAAAC,QAAA,CAAkBG,OAAA,uPCaHC,EAXF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,KAAGC,KAAMJ,EAAMK,KAAMC,UAAWC,IAAQX,MAAxC,IAA+CK,EAAAC,EAAAC,cAAA,WAC3CF,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,WAClCV,EAAAC,EAAAC,cAAA,aAAKH,EAAMY,WAAX,KACAX,EAAAC,EAAAC,cAAA,cAAMH,EAAMa,MAAZ,yCCFShB,6MACjBiB,MAAQ,CACJC,MAAO,KACPC,KAAM,sFAGW,IAAAC,EAAAC,KACjBC,IAAMC,IAAI,0BAA0BF,KAAKJ,MAAME,MAC9CK,KAAK,SAACC,GACHL,EAAKM,SAAS,CAACR,MAAOO,EAAIE,OAC1BC,QAAQC,IAAIJ,EAAIE,yCAQpB,IAAIG,EAAQ,eAMZ,OALIT,KAAKJ,MAAMC,QACXY,EAAQT,KAAKJ,MAAMC,MAAMa,IAAI,SAACC,GAC1B,OAAO5B,EAAAC,EAAAC,cAACP,EAAD,CAAMkC,IAAKD,EAAKE,GAAIlB,MAAOgB,EAAKhB,MAAMmB,SAAUvB,MAAOoB,EAAKI,2BAA4B5B,KAAMwB,EAAKxB,UAI9GJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACAjC,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAQV,OACnB8B,WA5BkBQ,IAAMC,4BCM1BtC,EATA,SAACE,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAQT,QACpBG,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,QAChBR,EAAAC,EAAAC,cAAA,cAAOH,EAAMqC,YCFzBlB,IAAMmB,SAASC,QAAU,2CAEJC,mLAEb,OACIvC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACAjC,EAAAC,EAAAC,cAACsC,EAAD,CAAQhC,MAAM,wGAAd,eACAR,EAAAC,EAAAC,cAACuC,EAAD,cALwBP,IAAMC,WCO3BO,mLARX,OACE1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACyC,EAAD,cAJUR,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.12b7b9b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blog\":\"Blog_Blog__1PpmS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blogs\":\"Blogs_Blogs__3vVvG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Banner\":\"Banner_Banner__30mQO\"};","import React from 'react';\nimport classes from './Blog.module.scss';\n\nconst blog = (props) => {\n    return (\n        <a href={props.link} className={classes.Blog}> <div > \n            <img src={props.image} alt={props.imageAlt}/>\n            <p> {props.categories} </p>\n            <h3> {props.title} </h3>\n        </div>\n        </a>\n    )\n}\n\nexport default blog;","import React from 'react';\nimport Blog from './Blog/Blog';\nimport classes from './Blogs.module.scss';\n\nimport axios from 'axios';\n\nexport default class Blogs extends React.Component {\n    state = {\n        posts: null,\n        page: 1,\n    }\n    \n    componentDidMount () {\n        axios.get('/posts?per_page=8&page='+this.state.page)\n        .then((res) => {\n            this.setState({posts: res.data});\n            console.log(res.data);\n        })\n    }\n\n\n\n\n    render() {\n        let blogs = \"Loading...! \";\n        if (this.state.posts) {\n            blogs = this.state.posts.map((post) => {\n                return <Blog key={post.id} title={post.title.rendered} image={post.jetpack_featured_media_url} link={post.link}/>\n            })\n        }\n        return(\n            <>\n            <h1> RECENET BLOGS </h1>\n            <div className={classes.Blogs}> \n                {blogs}\n            </div>\n            </>\n        )\n    }\n}","import React from 'react';\nimport classes from './Banner.module.scss';\n\nconst Banner = (props) => {\n    return (\n        <div className={classes.Banner}>\n            <img src={props.image} />\n            <h1> { props.children }</h1>\n        </div>\n    );\n}\n\nexport default Banner;","import React from 'react';\nimport Blogs from '../components/Blogs/Blogs';\nimport axios from 'axios';\nimport Banner from '../components/Banner/Banner';\n\naxios.defaults.baseURL = \"https://visibleone.com/wp-json/wp/v2\";\n\nexport default class Layout extends React.Component {\n    render() {\n        return(\n            <>\n            <Banner image='https://i1.wp.com/visibleone.com/wp-content/uploads/2019/01/web-development.jpg?fit=1024%2C288&ssl=1'> OUR BLOGS </Banner>\n            <Blogs />\n            </>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from './container/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}